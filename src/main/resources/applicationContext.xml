<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://mybatis.org/schema/mybatis-spring
        http://mybatis.org/schema/mybatis-spring-1.2.xsd
        ">

    <!--spring希望管理所有的业务逻辑组件，他不扫描控制器，让springmvc进行管理-->
    <context:component-scan base-package="com.lijia">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <!--引入数据库的属性配置文件-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!--配置数据源c3p0-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driverClass}"/>
        <property name="jdbcUrl" value="${jdbc.jdbcUrl}"/>
        <property name="user" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
     </bean>
    <!--整合mybatis
    目的：1.spring管理所有组件，mapper的实现类
            service===>Dao   @Autowired 自动注入mapper
          2.spring用来管理事务，spring声明式事务
    -->
    <!--注册sqlSessionFactoryBean及mapper动态代理-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--指定数据源-->
        <property name="dataSource" ref="dataSource"/>
        <!--指定mybatis主配置文件的位置-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--指定mybatis的mapper文件的位置，这样就不用在mybatis主配置文件里面引入映射文件-->
        <property name="mapperLocations" value="classpath:EmployeeMapper.xml"/>
    </bean>
    <!--生成Dao的代理对象-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.lijia.dao"/>
    </bean>
    <!--扫描所有的mapper接口的实现，让这些mapper能够自动注入-->
    <!--<mybatis-spring:scan base-package="com.lijia.dao"/>-->

    <!--配置一个可以进行批量操作的sqlSession-->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <!--ref="sqlSessionFactory是上面注册sqlSessionFactoryBean及mapper动态代理的id-->
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
        <!--指定为批量插入-->
        <constructor-arg name="executorType" value="BATCH"/>
    </bean>




    <!--==============================配置相关的事务管理==========================-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--ref="dataSource" 是上面配置数据库信息的id-->
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!--注册事务通知-->
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <!--配置aop-->
    <aop:config>
        <aop:pointcut id="myPointcut" expression="execution(* com.lijia.*.*(..))"/>
        <aop:advisor advice-ref="transactionAdvice" pointcut-ref="myPointcut"/>
    </aop:config>
</beans>